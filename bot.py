import logging
import asyncio
from webbrowser import get
from aiogram import Bot, Dispatcher, types 
from aiogram.filters import Command 
from aiogram.types import FSInputFile
import yt_dlp
import os
import time

logging.basicConfig(level=logging.INFO)

bot = Bot(token="6408238757:AAHNs9ApmYEnz0uELWMMmth7nUtLuwXkgt0")
dp = Dispatcher()

class FilenameCollectorPP(yt_dlp.postprocessor.common.PostProcessor):
	def __init__(self):
		super(FilenameCollectorPP, self).__init__(None)
		self.filenames = []

	def run(self, information):
		self.filenames.append(information["filepath"])
		return [], information

@dp.message(lambda message: not message.text.startswith('/'))
async def unknown_command(message: types.Message):
    await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ —Ç–æ —á–µ–≥–æ —è –Ω–µ –∑–Ω–∞—é, —è –ª–æ–º–∞—é—Å—å (. \n –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /help")

@dp.message(Command('start'))
async def send_welcome(message: types.Message):
    nickname = message.from_user.username
    if nickname:
        await message.reply(f"Hey, {nickname}!")
    else:
        await message.reply("Hey!")

@dp.message(Command('help'))
async def send_instructions(message: types.Message):
    instructions = "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\nüü¢–≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤–≤–æ–¥—è—Ç—Å—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/sea *–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –Ω–∞–∑–≤–∞–Ω–∏–µ*\n/yt *—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Å–Ω—é –¢–û–õ–¨–ö–û –Ω–∞ —é—Ç—É–±*\nüü¢–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω —Ä–∞–∑–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–æ–º–∞–Ω–¥–∞ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Å–Ω—è - –¥—Ä—É–≥–∏–º), —Ç–æ –±–æ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç!\nüî¥–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –í–ê–ñ–ù–û —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É, —Ç–æ–≥–¥–∞ –æ–Ω–∞ –≤–≤–µ–¥–µ—Ç—Å—è –≤ –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—èüî¥"
    await message.reply(instructions)

@dp.message(Command('sea'))
async def search(message: types.Message):
	arg = message.text.split(maxsplit=1)[1]
	await message.reply('–û–∂–∏–¥–∞–π—Ç–µ...')
	YDL_OPTIONS = {'format': 'bestaudio/best',
		'noplaylist':'True',
		'postprocessors': [{
			'key': 'FFmpegExtractAudio',
			'preferredcodec': 'mp3',
			'preferredquality': '192'
		}],
	}
	with yt_dlp.YoutubeDL(YDL_OPTIONS) as ydl:
		try:
			get(arg) 
		except:
			filename_collector = FilenameCollectorPP()
			ydl.add_post_processor(filename_collector)
			video = ydl.extract_info(f"ytsearch:{arg}", download=True)['entries'][0]
			await message.reply_document(FSInputFile(filename_collector.filenames[0]))
			await message.reply(f'–§–∞–π–ª –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n\n__{arg}__')
			time.sleep(5)
			os.remove(filename_collector.filenames[0])
			
		else:
			video = ydl.extract_info(arg, download=True)
		
		return filename_collector.filenames[0]

@dp.message(Command('yt'))
async def youtube(message: types.Message):
	arguments = message.text.split(maxsplit=1)[1]
	await message.reply("–û–∂–∏–¥–∞–π—Ç–µ...")
	ydl_opts = {
		'format': 'bestaudio/best',
		'postprocessors': [{
			'key': 'FFmpegExtractAudio',
			'preferredcodec': 'mp3',
			'preferredquality': '192',
		}],
	}
	with yt_dlp.YoutubeDL(ydl_opts) as ydl:
		filename_collector = FilenameCollectorPP()
		ydl.add_post_processor(filename_collector)
		ydl.download([arguments])
		
		
		await message.reply_document(FSInputFile(filename_collector.filenames[0]))
		await message.reply(f'–§–∞–π–ª –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n\n__{arguments}__')
		time.sleep(5)
		os.remove(filename_collector.filenames[0])
		return filename_collector.filenames[0]

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

